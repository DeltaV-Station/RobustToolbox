using System;
using System.Net;
using System.Text.RegularExpressions;
using Robust.Client;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Network;

namespace Robust.Client.UserInterface.Screens;

[GenerateTypedNameReferences]
public sealed partial class DebugBuiltinConnectionScreen : UIScreen
{
    [Dependency] private readonly IBaseClient _client = default!;

    // ReSharper disable once InconsistentNaming
    private static readonly Regex IPv6Regex = new(@"\[(.*:.*:.*)](?::(\d+))?");

    public DebugBuiltinConnectionScreen()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        SetAnchorPreset(this, LayoutPreset.Wide);

        SetAnchorPreset(ConnectionBox, LayoutPreset.TopRight);
        SetMarginRight(ConnectionBox, -25);
        SetMarginTop(ConnectionBox, 30);
        SetGrowHorizontal(ConnectionBox, GrowDirection.Begin);
        ConnectButton.OnPressed += ConnectButtonOnOnPressed;
    }

    private void ConnectButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        ParseAddress(ConnectionAddress.Text, out var ip, out var port);
        _client.ConnectToServer(ip, port);
    }

    private void ParseAddress(string address, out string ip, out ushort port)
    {
        var match6 = IPv6Regex.Match(address);
        if (match6 != Match.Empty)
        {
            ip = match6.Groups[1].Value;
            if (!match6.Groups[2].Success)
            {
                port = _client.DefaultPort;
            }
            else if (!ushort.TryParse(match6.Groups[2].Value, out port))
            {
                throw new ArgumentException("Not a valid port.");
            }

            return;
        }

        // See if the IP includes a port.
        var split = address.Split(':');
        ip = address;
        port = _client.DefaultPort;
        if (split.Length > 2)
        {
            throw new ArgumentException("Not a valid Address.");
        }

        // IP:port format.
        if (split.Length == 2)
        {
            ip = split[0];
            if (!ushort.TryParse(split[1], out port))
            {
                throw new ArgumentException("Not a valid port.");
            }
        }
    }
}
