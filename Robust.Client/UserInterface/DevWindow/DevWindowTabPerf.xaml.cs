using System.Collections.Generic;
using System.Runtime.InteropServices;
using Robust.Client.AutoGenerated;
using Robust.Client.Profiling;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Log;
using Robust.Shared.Profiling;
using Robust.Shared.Utility.Collections;

namespace Robust.Client.UserInterface;

[GenerateTypedNameReferences]
public sealed partial class DevWindowTabPerf : Control
{
    [Dependency] private readonly ProfManager _profManager = default!;
    [Dependency] private readonly ProfViewManager _profViewMgr = default!;

    private ProfViewManager.Snapshot? _currentSnapshot;
    private long _frame;

    private TreeExpand _treeExpand = new();

    public DevWindowTabPerf()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SnapButton.OnPressed += SnapButtonOnOnPressed;
        ButtonDeleteSnap.OnPressed += ButtonDeleteSnapOnOnPressed;
        GraphView.FrameSelected += GraphViewOnFrameSelected;
    }

    private void GraphViewOnFrameSelected(long obj)
    {
        if (_currentSnapshot == null)
            return;

        _frame = obj;
        GraphView.HighlightFrame = obj;
        RebuildTree();
    }

    protected override void EnteredTree()
    {
        _profViewMgr.SnapshotsUpdated += ProfViewMgrOnSnapshotsUpdated;

        UpdateSnapshotList();
    }

    protected override void ExitedTree()
    {
        _profViewMgr.SnapshotsUpdated -= ProfViewMgrOnSnapshotsUpdated;
    }

    private void ProfViewMgrOnSnapshotsUpdated()
    {
        UpdateSnapshotList();
    }

    private void SnapButtonOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        _profViewMgr.Snap();
        SnapshotSelected(_profViewMgr.Snapshots[^1]);
    }

    private void ButtonDeleteSnapOnOnPressed(BaseButton.ButtonEventArgs obj)
    {
        if (_currentSnapshot == null)
            return;

        _profViewMgr.DeleteSnapshot(_currentSnapshot);
        _currentSnapshot = null;
        UpdateRightPanel();
    }

    private void UpdateSnapshotList()
    {
        SnapList.RemoveAllChildren();

        for (var i = _profViewMgr.Snapshots.Count - 1; i >= 0; i--)
        {
            var snap = _profViewMgr.Snapshots[i];

            var button = new Button
            {
                Text = $"{snap.Identifier}: {snap.StartFrame} - {snap.EndFrame}",
                ToggleMode = true
            };

            if (snap == _currentSnapshot)
                button.Pressed = true;

            button.OnPressed += _ => SnapshotSelected(snap);

            SnapList.AddChild(button);
        }
    }

    private void SnapshotSelected(ProfViewManager.Snapshot snapshot)
    {
        _currentSnapshot = snapshot;
        UpdateRightPanel();
        UpdateSnapshotList();
        GraphViewOnFrameSelected(_currentSnapshot.EndFrame);
    }

    private void UpdateRightPanel()
    {
        RightPanel.Visible = _currentSnapshot != null;

        if (_currentSnapshot == null)
            return;

        LabelTopText.Text =
            $"Snapshot: {_currentSnapshot.StartFrame} - {_currentSnapshot.EndFrame}  Frame count: {_currentSnapshot.FrameCount}";

        GraphView.LoadSnapshot(_currentSnapshot);
        _frame = _currentSnapshot.EndFrame;
        RebuildTree();
    }

    public void RebuildTree()
    {
        if (_currentSnapshot == null)
            return;

        TreeRoot.RemoveAllChildren();

        ref var buf = ref _currentSnapshot.Buffer;
        var indexIdx = _profViewMgr.GetIndexOfFrame(_frame, _currentSnapshot);
        if (indexIdx == 0)
        {
            Logger.WarningS("prof.ui", $"Unable to find index for frame: {_frame}");
            return;
        }


        ref var index = ref _currentSnapshot.Buffer.IndexIdx(indexIdx);

        var i = index.EndPos - 1;
        ref var logEnd = ref buf.BufferIdx(i);
        var controls = new ValueList<Control>();
        RebuildTreeGroup(
            buf,
            index,
            ref i,
            ref logEnd.GroupEnd,
            ref controls,
            (logEnd.GroupEnd.StringId, 1),
            _treeExpand);

        for (var c = controls.Count - 1; c >= 0; c--)
        {
            TreeRoot.AddChild(controls[c]);
        }
    }

    private void RebuildTreeAddControls(
        in ProfBuffer buffer,
        in ProfIndex index,
        ref long i,
        ref ProfLog log,
        ref ValueList<Control> insertInto,
        Dictionary<int, int> totalCounts,
        Dictionary<int, int> countDict,
        TreeExpand expandParent)
    {
        switch (log.Type)
        {
            case ProfLogType.Sample:
                insertInto.Add(new Label { Text = SampleString(log.Value.StringId, log.Value.Value) });
                break;

            case ProfLogType.GroupEnd:
                var stringId = log.GroupEnd.StringId;

                ref var count = ref CollectionsMarshal.GetValueRefOrAddDefault(countDict, stringId, out _);
                count += 1;
                var totalCount = totalCounts[stringId];

                var stringI = totalCount - count;

                RebuildTreeGroup(
                    buffer,
                    index,
                    ref i,
                    ref log.GroupEnd,
                    ref insertInto,
                    (stringId, stringI),
                    expandParent);
                break;
        }
    }

    private void RebuildTreeGroup(
        in ProfBuffer buffer,
        in ProfIndex index,
        ref long i,
        ref ProfLogGroupEnd logEnd,
        ref ValueList<Control> insertInto,
        (int str, int i) expandId,
        TreeExpand expandParent)
    {
        i -= 1;

        var groupControl = new ProfTreeEntry(this, expandParent, expandId);
        groupControl.Text.Text = SampleString(logEnd.StringId, logEnd.Value);

        insertInto.Add(groupControl);

        var totalCounts = GetTotalGroupCounts(buffer, index, i, logEnd.StartIndex);
        var countDict = new Dictionary<int, int>();

        var expand = expandParent.ExpandedItems.GetValueOrDefault(expandId);
        if (expand is not { Enabled: true })
        {
            i = logEnd.StartIndex;
            return;
        }

        groupControl.Arrow.Rotated = true;

        var children = new ValueList<Control>();

        for (; i >= index.StartPos; i--)
        {
            ref var log = ref buffer.BufferIdx(i);
            if (log.Type == ProfLogType.GroupStart)
                break;

            RebuildTreeAddControls(
                buffer,
                index,
                ref i,
                ref log,
                ref children,
                totalCounts,
                countDict,
                expand);
        }

        for (var c = children.Count - 1; c >= 0; c--)
        {
            groupControl.ChildEntryContainer.AddChild(children[c]);
        }
    }

    private static Dictionary<int, int> GetTotalGroupCounts(
        in ProfBuffer buffer,
        in ProfIndex index,
        long i,
        long startIdx)
    {
        var dict = new Dictionary<int, int>();

        for (; i > startIdx; i--)
        {
            ref var log = ref buffer.BufferIdx(i);
            if (log.Type != ProfLogType.GroupEnd)
                continue;

            i = log.GroupEnd.StartIndex;
            ref var val = ref CollectionsMarshal.GetValueRefOrAddDefault(dict, log.GroupEnd.StringId, out _);
            val += 1;
        }

        return dict;
    }

    private string SampleString(int stringId, in ProfValue value)
    {
        var cmdString = _profManager.GetString(stringId);

        var str = value.Type switch
        {
            ProfValueType.TimeAllocSample =>
                $"{value.TimeAllocSample.Time * 1000:N2} ms, {value.TimeAllocSample.Alloc} B",
            ProfValueType.Int32 => value.Int32.ToString(),
            ProfValueType.Int64 => value.Int64.ToString(),
            _ => "???"
        };

        return $"{cmdString}: {str}";
    }

    internal sealed class TreeExpand
    {
        public bool Enabled;
        public Dictionary<(int str, int i), TreeExpand> ExpandedItems;

        public TreeExpand()
        {
            Enabled = true;
            ExpandedItems = new();
        }
    }
}
