//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMessageLoggerService")]
public interface IMessageLoggerService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageLoggerService/LogServerIncomingNetMessage", ReplyAction="http://tempuri.org/IMessageLoggerService/LogServerIncomingNetMessageResponse")]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
    void LogServerIncomingNetMessage(long clientUID, int uid, int entityMessageType, int componentFamily, object[] parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageLoggerService/LogServerOutgoingNetMessage", ReplyAction="http://tempuri.org/IMessageLoggerService/LogServerOutgoingNetMessageResponse")]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
    void LogServerOutgoingNetMessage(long clientUID, int uid, int family, object[] parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageLoggerService/LogClientIncomingNetMessage", ReplyAction="http://tempuri.org/IMessageLoggerService/LogClientIncomingNetMessageResponse")]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
    void LogClientIncomingNetMessage(int uid, int entityMessageType, int componentFamily, object[] parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageLoggerService/LogClientOutgoingNetMessage", ReplyAction="http://tempuri.org/IMessageLoggerService/LogClientOutgoingNetMessageResponse")]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
    void LogClientOutgoingNetMessage(int uid, int family, object[] parameters);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageLoggerService/LogServerComponentMessage", ReplyAction="http://tempuri.org/IMessageLoggerService/LogServerComponentMessageResponse")]
    void LogServerComponentMessage(int senderid, int senderFamily, string senderType, int componentMessageType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageLoggerService/LogClientComponentMessage", ReplyAction="http://tempuri.org/IMessageLoggerService/LogClientComponentMessageResponse")]
    void LogClientComponentMessage(int senderid, int senderFamily, string senderType, int componentMessageType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageLoggerService/ServiceStatus", ReplyAction="http://tempuri.org/IMessageLoggerService/ServiceStatusResponse")]
    bool ServiceStatus();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMessageLoggerServiceChannel : IMessageLoggerService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MessageLoggerServiceClient : System.ServiceModel.ClientBase<IMessageLoggerService>, IMessageLoggerService
{
    
    public MessageLoggerServiceClient()
    {
    }
    
    public MessageLoggerServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MessageLoggerServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MessageLoggerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MessageLoggerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void LogServerIncomingNetMessage(long clientUID, int uid, int entityMessageType, int componentFamily, object[] parameters)
    {
        base.Channel.LogServerIncomingNetMessage(clientUID, uid, entityMessageType, componentFamily, parameters);
    }
    
    public void LogServerOutgoingNetMessage(long clientUID, int uid, int family, object[] parameters)
    {
        base.Channel.LogServerOutgoingNetMessage(clientUID, uid, family, parameters);
    }
    
    public void LogClientIncomingNetMessage(int uid, int entityMessageType, int componentFamily, object[] parameters)
    {
        base.Channel.LogClientIncomingNetMessage(uid, entityMessageType, componentFamily, parameters);
    }
    
    public void LogClientOutgoingNetMessage(int uid, int family, object[] parameters)
    {
        base.Channel.LogClientOutgoingNetMessage(uid, family, parameters);
    }
    
    public void LogServerComponentMessage(int senderid, int senderFamily, string senderType, int componentMessageType)
    {
        base.Channel.LogServerComponentMessage(senderid, senderFamily, senderType, componentMessageType);
    }
    
    public void LogClientComponentMessage(int senderid, int senderFamily, string senderType, int componentMessageType)
    {
        base.Channel.LogClientComponentMessage(senderid, senderFamily, senderType, componentMessageType);
    }
    
    public bool ServiceStatus()
    {
        return base.Channel.ServiceStatus();
    }
}
