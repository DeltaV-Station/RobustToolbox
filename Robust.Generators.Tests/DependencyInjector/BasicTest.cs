using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Robust.Generators.DependencyInjector;

namespace Robust.Generators.Tests.DependencyInjector;

[TestFixture]
[Parallelizable(ParallelScope.All)]
public sealed class BasicTest
{
    private const string InputText = """
        using Robust.Shared.IoC;

        namespace Baz;

        public sealed partial class FooBar
        {
            [Dependency]
            public string Dep;
        }

        public partial class Parent
        {
            [Dependency]
            private string Foo;
            [Dependency]
            private FooBar Bar;
        }

        public partial class Child : Parent
        {
            [Dependency]
            public object AnotherBar;
        }
        """;

    private const string ExpectedGeneratedFooBar = """
        // <auto-generated/>
        using System;
        using System.Runtime.CompilerServices;
        using Robust.Shared.IoC;

        namespace Baz;

        partial class FooBar : IDependencyInjector
        {
            Type[] IDependencyInjector.ReportDependencies()
            {
                return GeneratedReportDependencies(0);
            }

            void IDependencyInjector.InjectDependencies(ReadOnlySpan<object> dependencies)
            {
                GeneratedInjectDependencies(dependencies);
            }

            private Type[] GeneratedReportDependencies(int childCount)
            {
                var types = new Type[childCount + 1];
                types[childCount + 0] = typeof(string);
                return types;
            }

            private void GeneratedInjectDependencies(ReadOnlySpan<object> dependencies)
            {
                this.Dep = (string)dependencies[0];
            }
        }
        """;


    private const string ExpectedGeneratedParent = """
        // <auto-generated/>
        using System;
        using System.Runtime.CompilerServices;
        using Robust.Shared.IoC;

        namespace Baz;

        partial class Parent : IDependencyInjector
        {
            Type[] IDependencyInjector.ReportDependencies()
            {
                return GeneratedReportDependencies(0);
            }

            void IDependencyInjector.InjectDependencies(ReadOnlySpan<object> dependencies)
            {
                GeneratedInjectDependencies(dependencies);
            }

            protected virtual Type[] GeneratedReportDependencies(int childCount)
            {
                var types = new Type[childCount + 2];
                types[childCount + 0] = typeof(string);
                types[childCount + 1] = typeof(Baz.FooBar);
                return types;
            }

            protected virtual void GeneratedInjectDependencies(ReadOnlySpan<object> dependencies)
            {
                this.Foo = (string)dependencies[0];
                this.Bar = (Baz.FooBar)dependencies[1];
            }
        }
        """;

    private const string ExpectedGeneratedChild = """
        // <auto-generated/>
        using System;
        using System.Runtime.CompilerServices;
        using Robust.Shared.IoC;

        namespace Baz;

        partial class Child
        {
            protected override Type[] GeneratedReportDependencies(int childCount)
            {
                var types = base.GeneratedReportDependencies(childCount + 1);
                types[childCount + 0] = typeof(object);
                return types;
            }

            protected override void GeneratedInjectDependencies(ReadOnlySpan<object> dependencies)
            {
                base.GeneratedInjectDependencies(dependencies[1..]);
                this.AnotherBar = (object)dependencies[0];
            }
        }
        """;


    [Test]
    public void Test()
    {
        // Create an instance of the source generator.
        var generator = new DependencyInjectorGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(BasicTest),
            new[] { DependencyTestShared.TypeDefinitionsSyntax, CSharpSyntaxTree.ParseText(InputText) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        Assert.Multiple(() =>
        {
            CheckFile("Baz.FooBar.g.cs", ExpectedGeneratedFooBar);
            CheckFile("Baz.Parent.g.cs", ExpectedGeneratedParent);
            CheckFile("Baz.Child.g.cs", ExpectedGeneratedChild);
        });

        return;

        void CheckFile(string name, string expected)
        {
            // All generated files can be found in 'RunResults.GeneratedTrees'.
            var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith(name));

            // Complex generators should be tested using text comparison.
            Assert.That(
                generatedFileSyntax.GetText().ToString().Replace("\r", ""),
                Is.EqualTo(expected.Replace("\r", "")));
        }
    }
}
