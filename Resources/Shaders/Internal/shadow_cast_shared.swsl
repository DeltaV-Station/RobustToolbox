uniform sampler2D shadowMap;
uniform mat4 shadowMatrix;

bool doesOcclude(vec2 diff, float mapOffsetY)
{
    float angle = atan(diff.y, -diff.x) + PI + radians(135.0);

    angle = mod(angle, 2 * PI);

    vec2 shadowPoint;
    float shadowMapOffset;

    if (angle < radians(90.0)) // Top
    {
        shadowPoint = diff;
        shadowMapOffset = 0;
    }
    else if (angle < radians(180.0)) // Right
    {
        shadowPoint = vec2(-diff.y, diff.x);
        shadowMapOffset = 0.25;
    }
    else if (angle < radians(270.0)) // Bottom
    {
        shadowPoint = -diff;
        shadowMapOffset = 0.50;
    }
    else // Left
    {
        shadowPoint = vec2(diff.y, -diff.x);
        shadowMapOffset = 0.75;
    }

    vec4 s = shadowMatrix * vec4(shadowPoint, 0.0, 1.0);
    s.xyz /= s.w;
    float su = s.x * 0.5 + 0.5;
    float sz = s.z * 0.5 + 0.5;

    float shadowDepth = texture(shadowMap, vec2(su / 4 + shadowMapOffset, lightIndex)).r;

    return shadowDepth < sz;
}
